{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","scripts/main.js"],"names":["require","startButton","document","querySelector","listCells","querySelectorAll","scoreField","firstField","secondField","isMovingNow","winMessage","loseMessage","findRandNunb","min","max","Math","floor","random","findRandCellForStart","startGame","arr","startMessage","cellIndex","length","className","classList","add","textContent","remove","countScore","findTakenCells","arrTaken","push","createNewCell","newField","includes","addEventListener","takenCells","sum","steps","oldCellIndex","stepCount","oneStep","didMerge","sideMove","doStep","Promise","resolve","window","setTimeout","merge","newCellIndex","cancelClass","newNumber","lose","changeConditions","left","right","up","down","moveCells","doMove","didMove","isDescCycle","moveSide","step","firstCondition","secondCondition","thirdCondition","nextCellIndex","event","code"],"mappings":"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","file":"main.837f728f.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","'use strict';\n\nrequire('regenerator-runtime/runtime');\n\nconst startButton = document.querySelector('button.button.start');\nconst listCells = document.querySelectorAll('.innerField');\nconst scoreField = document.querySelector('span.game-score');\nlet firstField = 0;\nlet secondField = 0;\nlet isMovingNow = false;\n\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst findRandNunb = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nstartButton.addEventListener('click', () => {\n  startGame();\n});\n\nfunction findRandCellForStart() {\n  const min = 1;\n  const max = 16;\n\n  firstField = findRandNunb(min, max);\n  secondField = findRandNunb(min, max);\n\n  while (secondField === firstField) {\n    secondField = findRandNunb(min, max);\n  }\n\n  return [firstField, secondField];\n}\n\nfunction startGame() {\n  const arr = findRandCellForStart();\n  const startMessage = document.querySelector('.message-start');\n\n  for (let cellIndex = 0; cellIndex < listCells.length; cellIndex++) {\n    listCells[cellIndex].className = '';\n    listCells[cellIndex].classList.add('field-cell');\n    listCells[cellIndex].textContent = '';\n  }\n\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n  listCells[arr[0]].textContent = '2';\n  listCells[arr[1]].textContent = '2';\n  listCells[arr[0]].classList = ('innerField field-cell--2');\n  listCells[arr[1]].classList = ('innerField field-cell--2');\n  startMessage.classList.add('hidden');\n  scoreField.textContent = countScore(findTakenCells());\n}\n\nfunction findTakenCells() {\n  const arrTaken = [];\n\n  for (let cellIndex = 0; cellIndex < listCells.length; cellIndex++) {\n    if (listCells[cellIndex].textContent !== '') {\n      arrTaken.push(cellIndex);\n    }\n  }\n\n  return arrTaken;\n}\n\nfunction createNewCell() {\n  const min = 1;\n  const max = 16;\n\n  let newField = findRandNunb(min, max);\n\n  while (findTakenCells().includes(newField)) {\n    newField = findRandNunb(min, max);\n  }\n\n  listCells[newField].textContent = '2';\n  listCells[newField].classList = ('innerField field-cell--2');\n  scoreField.textContent = countScore(findTakenCells());\n}\n\nconst countScore = (takenCells) => {\n  let sum = 0;\n\n  for (let cellIndex = 0; cellIndex < takenCells.length; cellIndex++) {\n    if (listCells[takenCells[cellIndex]].textContent !== '') {\n      sum += +listCells[takenCells[cellIndex]].textContent;\n    }\n  }\n\n  return sum;\n};\n\nconst steps = async(oldCellIndex, stepCount, oneStep, didMerge, sideMove) => {\n  if (stepCount !== 0 || didMerge) {\n    listCells[oldCellIndex].classList\n      .add(`field-cell--move-${sideMove}--${didMerge\n        ? stepCount + 1 : stepCount}`);\n\n    if (stepCount !== 0) {\n      const doStep = new Promise((resolve) => {\n        window.setTimeout(() => {\n          listCells[oldCellIndex - (oneStep * stepCount)]\n            .textContent = listCells[oldCellIndex].textContent;\n          listCells[oldCellIndex].textContent = '';\n\n          listCells[oldCellIndex - (oneStep * stepCount)]\n            .classList = listCells[oldCellIndex].classList;\n          listCells[oldCellIndex].classList = 'innerField';\n\n          resolve();\n        }, 100);\n      });\n\n      await doStep;\n    }\n\n    listCells[oldCellIndex - (oneStep * stepCount)].classList\n      .remove(`field-cell--move-${sideMove}--${didMerge\n        ? stepCount + 1 : stepCount}`);\n  }\n\n  didMerge && merge(oldCellIndex - (oneStep * (stepCount + 1)),\n    oldCellIndex - (stepCount && stepCount * oneStep));\n};\n\nconst merge = async(newCellIndex, oldCellIndex) => {\n  const newNumber = +listCells[oldCellIndex].textContent * 2;\n\n  if (newNumber === 2048) {\n    winMessage.classList.remove('hidden');\n  }\n\n  listCells[newCellIndex]\n    .classList = (`innerField field-cell--${newNumber} field-cell--merge`);\n  listCells[newCellIndex].textContent = newNumber;\n\n  listCells[oldCellIndex].classList = 'innerField';\n  listCells[oldCellIndex].textContent = '';\n\n  const cancelClass = new Promise((resolve) => {\n    window.setTimeout(() => {\n      listCells[newCellIndex].classList.remove('field-cell--merge');\n      resolve();\n    }, 150);\n  });\n\n  await cancelClass;\n};\n\nconst lose = (changeConditions) => {\n  const left = changeConditions('left')[1]\n  || changeConditions('left')[2] || changeConditions('left')[3];\n\n  const right = changeConditions('right')[1]\n  || changeConditions('right')[2] || changeConditions('right')[3];\n\n  const up = changeConditions('up')[1]\n  || changeConditions('up')[2] || changeConditions('up')[3];\n\n  const down = changeConditions('down')[1]\n  || changeConditions('down')[2] || changeConditions('down')[3];\n\n  if (findTakenCells().length === 16 && !left && !right && !up && !down) {\n    loseMessage.classList.remove('hidden');\n  }\n};\n\nconst moveCells = async(sideMove) => {\n  const doMove = new Promise(async(resolve) => {\n    isMovingNow = true;\n\n    const takenCells = findTakenCells();\n    let didMove = false;\n    const isDescCycle = (sideMove === 'right' || sideMove === 'down') && true;\n\n    for (let cellIndex = isDescCycle ? (takenCells.length - 1) : 0;\n      cellIndex >= 0 && cellIndex <= takenCells.length - 1;\n      isDescCycle ? cellIndex-- : cellIndex++) {\n      let stepCount = 0;\n      let didMerge = false;\n\n      const changeConditions = (moveSide) => {\n        let step = 1;\n        let firstCondition = (takenCells[cellIndex] % 4 === 1);\n        let secondCondition = (takenCells[cellIndex] % 4 === 2);\n        let thirdCondition = (takenCells[cellIndex] % 4 === 3);\n\n        if (moveSide === 'up') {\n          firstCondition = takenCells[cellIndex] >= 4\n          && takenCells[cellIndex] <= 7;\n\n          secondCondition = takenCells[cellIndex] >= 8\n          && takenCells[cellIndex] <= 11;\n\n          thirdCondition = takenCells[cellIndex] >= 12\n          && takenCells[cellIndex] <= 15;\n          step = 4;\n        }\n\n        if (moveSide === 'right') {\n          step = -1;\n\n          firstCondition = (takenCells[cellIndex] % 4 === 2);\n          secondCondition = (takenCells[cellIndex] % 4 === 1);\n          thirdCondition = (takenCells[cellIndex] % 4 === 0);\n        }\n\n        if (moveSide === 'down') {\n          step = -4;\n\n          firstCondition = takenCells[cellIndex] >= 8\n            && takenCells[cellIndex] <= 11;\n\n          secondCondition = takenCells[cellIndex] >= 4\n            && takenCells[cellIndex] <= 7;\n\n          thirdCondition = takenCells[cellIndex] >= 0\n          && takenCells[cellIndex] <= 3;\n        }\n\n        return [step, firstCondition, secondCondition, thirdCondition];\n      };\n\n      const oneStep = changeConditions(sideMove)[0];\n      const oldCellIndex = takenCells[cellIndex];\n      const nextCellIndex = takenCells[cellIndex]\n      - oneStep;\n\n      if (changeConditions(sideMove)[1]) {\n        if (listCells[nextCellIndex].textContent === '') {\n          stepCount++;\n        } else if (listCells[nextCellIndex].textContent\n        === listCells[oldCellIndex].textContent) {\n          didMerge = true;\n        }\n      }\n\n      if (changeConditions(sideMove)[2]) {\n        if (listCells[nextCellIndex].textContent === '') {\n          stepCount++;\n\n          if (listCells[nextCellIndex - oneStep].textContent === '') {\n            stepCount++;\n          } else if (listCells[nextCellIndex - oneStep].textContent\n          === listCells[oldCellIndex].textContent) {\n            didMerge = true;\n          }\n        } else if (listCells[nextCellIndex].textContent\n        === listCells[oldCellIndex].textContent) {\n          didMerge = true;\n        }\n      }\n\n      if (changeConditions(sideMove)[3]) {\n        if (listCells[nextCellIndex].textContent === '') {\n          stepCount++;\n\n          if (listCells[nextCellIndex - oneStep].textContent === '') {\n            stepCount++;\n\n            if (listCells[nextCellIndex - (oneStep * 2)].textContent === '') {\n              stepCount++;\n            } else if (listCells[nextCellIndex - (oneStep * 2)].textContent\n            === listCells[oldCellIndex].textContent) {\n              didMerge = true;\n            }\n          } else if (listCells[nextCellIndex - oneStep].textContent\n          === listCells[oldCellIndex].textContent) {\n            didMerge = true;\n          }\n        } else if (listCells[nextCellIndex].textContent\n        === listCells[oldCellIndex].textContent) {\n          didMerge = true;\n        }\n      }\n\n      if (stepCount !== 0 || didMerge) {\n        await steps(oldCellIndex, stepCount, oneStep, didMerge, sideMove);\n        didMove = true;\n      }\n\n      lose(changeConditions);\n    };\n\n    didMove && createNewCell();\n\n    resolve();\n  });\n\n  await doMove;\n\n  isMovingNow = false;\n};\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keyup', (event) => {\n  switch (event.code) {\n    case 'ArrowLeft':\n      !isMovingNow && moveCells('left');\n      break;\n    case 'ArrowRight':\n      !isMovingNow && moveCells('right');\n      break;\n    case 'ArrowUp':\n      !isMovingNow && moveCells('up');\n      break;\n    case 'ArrowDown':\n      !isMovingNow && moveCells('down');\n      break;\n    default:\n      break;\n  }\n});\n"]}